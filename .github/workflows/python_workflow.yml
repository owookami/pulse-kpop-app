name: Python 크롤러 CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'crawler/**'
      - '.github/workflows/python_workflow.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'crawler/**'
      - '.github/workflows/python_workflow.yml'
  workflow_dispatch:

jobs:
  lint:
    name: 린트 및 코드 품질
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./crawler
    steps:
      - uses: actions/checkout@v3
      
      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      
      - name: Flake8 실행
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Black 코드 포맷팅 검사
        run: black --check .
      
      - name: Import 정렬 검사
        run: isort --check-only --profile black .
      
      - name: Type 검사
        run: mypy .

  test:
    name: 테스트
    needs: lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./crawler
    steps:
      - uses: actions/checkout@v3
      
      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      
      - name: 테스트 실행
        run: pytest --cov=./app --cov-report=xml
      
      - name: 커버리지 업로드
        uses: codecov/codecov-action@v5
        with:
          file: ./crawler/coverage.xml
          fail_ci_if_error: true

  build:
    name: Docker 이미지 빌드
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./crawler
    steps:
      - uses: actions/checkout@v3
      
      - name: 환경 변수 설정
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "TAG=latest" >> $GITHUB_ENV
          else
            echo "ENV=development" >> $GITHUB_ENV
            echo "TAG=dev" >> $GITHUB_ENV
          fi
      
      - name: Docker 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Docker 메타데이터 설정
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/crawler
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,format=long
            ${{ env.TAG }}
      
      - name: Docker 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: ./crawler
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ENV=${{ env.ENV }}

  deploy:
    name: 클라우드 배포
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Google Cloud 인증
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      
      - name: GKE 설정
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: '${{ secrets.GKE_CLUSTER }}'
          location: '${{ secrets.GKE_ZONE }}'
      
      - name: 이미지 태그 설정
        run: |
          echo "IMAGE_TAG=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      
      - name: 배포 업데이트
        run: |
          kubectl set image deployment/crawler crawler=ghcr.io/${{ github.repository }}/crawler:${{ env.IMAGE_TAG }}
          kubectl rollout status deployment/crawler 