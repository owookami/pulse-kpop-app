class FeedVideosNotifier extends AsyncNotifier<List<Video>> {
  late VideoService _videoService;

  @override
  Future<List<Video>> build() async {
    _videoService = ref.read(videoServiceProvider);
    return _loadVideos(FeedViewType.trending);
  }

  /// 비디오 선택
  void selectVideo(Video video) {
    ref.read(selectedVideoProvider.notifier).state = video;
  }

  /// 비디오 로드
  Future<List<Video>> loadVideos(FeedViewType viewType, {bool forceRefresh = false}) async {
    // 현재 뷰 타입 설정
    ref.read(feedViewTypeProvider.notifier).state = viewType;

    // 상태 업데이트
    state = const AsyncValue.loading();

    try {
      final videos = await _loadVideos(viewType);
      return videos;
    } catch (error, stackTrace) {
      state = AsyncValue.error(error, stackTrace);
      return [];
    }
  }

  /// 내부 비디오 로드 구현
  Future<List<Video>> _loadVideos(FeedViewType viewType) async {
    try {
      List<Video> videos = [];

      switch (viewType) {
        case FeedViewType.trending:
          videos = await _videoService.getPopularVideos(limit: 20);
          break;
        case FeedViewType.latest:
          videos = await _videoService.getLatestVideos(limit: 20);
          break;
        case FeedViewType.favorites:
          videos = await _videoService.getFavoriteVideos(limit: 20);
          break;
      }

      // 상태 업데이트
      state = AsyncValue.data(videos);

      return videos;
    } catch (error, stackTrace) {
      // 오류 로깅
      debugPrint('비디오 로드 오류: $error');

      // 오류 상태 업데이트
      state = AsyncValue.error('비디오를 불러오는 중 오류가 발생했습니다.', stackTrace);
      rethrow;
    }
  }
}

